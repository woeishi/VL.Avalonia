using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace VL.Avalonia.CodeGen.ClassHandlers;

/// <summary>
/// TODO convert to CLA
/// </summary>
public class ProcessNodeHandler : IClassHandler
{
    public bool CanHandle(ClassDeclarationSyntax classDecl) =>
        classDecl.AttributeLists.Any(attrs =>
            attrs.Attributes.Any(a =>
                a.Name.NormalizeWhitespace().ToFullString().StartsWith("ProcessNode")));

    public string? GenerateClass(ClassDeclarationSyntax classDecl,
    ISymbol classSymbol,
    IEnumerable<string> generatedMethods)
    {
        var sb = new StringBuilder();

        // Extract usings from the syntax tree
        foreach (var usingStatement in classDecl.SyntaxTree.GetCompilationUnitRoot().Usings)
        {
            sb.AppendLine(usingStatement.ToString());
        }

        var usingSection = sb.ToString();

        // 2. Namespace logic
        var ns = classSymbol.ContainingNamespace?.ToDisplayString() ?? string.Empty;
        var namespaceOpen = string.IsNullOrEmpty(ns) ? "" : $"namespace {ns}\n{{\n";
        var namespaceClose = string.IsNullOrEmpty(ns) ? "" : "}\n";

        // 3. Modifiers (ensure partial)
        var modifiers = string.Join(" ", classDecl.Modifiers
            .Where(m => m.Text == "public" || m.Text == "internal" || m.Text == "partial"));
        if (!modifiers.Contains("partial"))
            modifiers += " partial";
        modifiers = modifiers.Trim();

        //// 4. Class attributes
        //var attributes = classDecl.AttributeLists.Count > 0
        //    ? string.Join("\n", classDecl.AttributeLists.Select(a => a.ToFullString().Trim()))
        //    : string.Empty;

        //if (!string.IsNullOrEmpty(attributes))
        //    attributes += "\n"; // Add spacing after attributes

        var attributes = "\n";

        // 5. Class name with generic parameters
        var className = classDecl.Identifier.Text + classDecl.TypeParameterList?.ToFullString();

        // 6. Compose result (directly insert generated methods)
        return $@"// <auto-generated/>
{usingSection}
{namespaceOpen}
{attributes}{modifiers} class {className}
{{
{string.Join("\n", generatedMethods)}
}}
{namespaceClose}";
    }
}

